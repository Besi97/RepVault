extend type Query {
    """ Retrieves a single workout with the given ID, or all workouts if ID is not provided """
    workouts(id: ID): [Workout!]!
}

extend type Mutation {
    createEmptyWorkout(name: String!): Workout!
    updateWorkoutName(id: ID!, newName: String!): Workout!
    deleteWorkout(id: ID!): Boolean!

    addNewSetGroup(workoutId: ID!): Workout!
    deleteSetGroup(setGroupId: ID!): Workout!

    addNewSet(setGroupId: ID!, set: SetInput!): Workout!
    updateSet(setId: ID!, set: SetInput!): Workout!
    deleteSet(setId: ID!): Workout!
}

type Workout {
    id: ID!
    name: String!
    setGroups: [SetGroup!]!
}

type SetGroup {
    id: ID!
    sets: [Set!]!
}

type Set {
    id: ID!
    exercise: Exercise!
    repetitions: Int
    weight: Float
    weightUnit: WeightUnit
    setType: SetType
    restAfter: Int
}

input SetInput {
    exerciseId: ID!
    repetitions: Int
    weight: Float
    weightUnit: WeightUnit
    setType: SetType
    restAfter: Int
}

enum WeightUnit {
    KG
    LB
}

enum SetType {
    WARM_UP
    MAIN
}
